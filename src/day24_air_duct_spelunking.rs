use anyhow::{anyhow, Result};
use log::debug;
use permutator::Permutation;
use rayon::prelude::*;
use std::collections::BTreeMap;
use std::str::FromStr;
use utils::a_star::{a_star_search, CurrentNodeDetails, Node, Options, Successor};

pub(crate) fn run() {
    let _input = "###########
#0.1.....2#
#.#######.#
#4.......3#
###########";
    let _input = _get_input();

    let system: DuctSystem = _input.parse().unwrap();

    let shortest = find_shortest_path(&system, true);
    println!("shortest path: {}", shortest);
}

fn find_shortest_path(system: &DuctSystem, return_to_origin: bool) -> usize {
    let n = system.state.positions.keys().max().unwrap().0;
    let mut points: Vec<_> = (1..=n).collect();
    let permutations: Vec<_> = points.permutation().into_iter().collect();
    permutations
        .into_par_iter()
        .map(|permutation| {
            let result = find_shortest_path_for(system, &permutation[..], return_to_origin);
            debug!("shortest path for {:?} is {}", permutation, result);
            result
        })
        .min()
        .unwrap()
}

fn find_shortest_path_for(system: &DuctSystem, points: &[u32], return_to_origin: bool) -> usize {
    let mut total_cost = find_shortest_path_for_points(system, 0, points[0]);
    for points in points.windows(2) {
        total_cost += find_shortest_path_for_points(system, points[0], points[1]);
    }
    if return_to_origin {
        total_cost += find_shortest_path_for_points(system, points[points.len() - 1], 0);
    }
    total_cost
}

fn find_shortest_path_for_points(system: &DuctSystem, from: u32, to: u32) -> usize {
    let start = system.state.positions.get(&Position(from)).unwrap().clone();
    let end = system.state.positions.get(&Position(to)).unwrap();
    let options = Options::default().with_no_logs();
    let results = a_star_search(
        start,
        |current: &Coord| get_successors(current, &system.duct),
        |current| distance_function(current, end),
        |left| left == end,
        Some(&options),
    )
    .unwrap();
    results.shortest_path_cost as usize
}

fn get_successors(current: &Coord, duct: &Duct) -> Vec<Successor<Coord, i32>> {
    let mut results = Vec::new();
    let mut push = |x: usize, y: usize| {
        results.push(Successor::new(Coord { x, y }, 1));
    };
    if current.x > 0 && !duct.is_wall(current.x - 1, current.y) {
        push(current.x - 1, current.y)
    }
    if current.x < duct.len_x() - 1 && !duct.is_wall(current.x + 1, current.y) {
        push(current.x + 1, current.y)
    }
    if current.y > 0 && !duct.is_wall(current.x, current.y - 1) {
        push(current.x, current.y - 1)
    }
    if current.y < duct.len_y() - 1 && !duct.is_wall(current.x, current.y + 1) {
        push(current.x, current.y + 1)
    }

    results
}

fn distance_function(details: CurrentNodeDetails<Coord, i32>, end: &Coord) -> i32 {
    details.current_node.manhattan_distance(end) as i32
}

impl Node for Coord {}

struct Duct(Vec<Vec<Space>>);

impl Duct {
    pub(crate) fn is_wall(&self, x: usize, y: usize) -> bool {
        if let Space::Wall = self.0[y][x] {
            true
        } else {
            false
        }
    }
    #[inline]
    pub(crate) fn len_x(&self) -> usize {
        self.0[0].len()
    }
    #[inline]
    pub(crate) fn len_y(&self) -> usize {
        self.0.len()
    }
}

#[derive(Default)]
struct DuctState {
    positions: BTreeMap<Position, Coord>,
}

struct DuctSystem {
    duct: Duct,
    state: DuctState,
}

#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]
struct Position(u32);

enum Space {
    Empty,
    Wall,
}

#[derive(Hash, Eq, PartialEq, Ord, PartialOrd, Debug, Clone)]
struct Coord {
    x: usize,
    y: usize,
}

impl Coord {
    pub(crate) fn manhattan_distance(&self, other: &Self) -> usize {
        self.x.abs_diff(other.x) + self.y.abs_diff(other.y)
    }
}

impl FromStr for DuctSystem {
    type Err = anyhow::Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let mut state = DuctState::default();
        Ok(Self {
            duct: Duct(
                s.lines()
                    .enumerate()
                    .map(|(y, line)| {
                        line.chars()
                            .enumerate()
                            .map(|(x, c)| {
                                Ok(if c == '#' {
                                    Space::Wall
                                } else {
                                    if c.is_numeric() {
                                        state.positions.insert(
                                            Position(
                                                c.to_digit(10).ok_or(anyhow!("parse int error"))?,
                                            ),
                                            Coord { x, y },
                                        );
                                    }
                                    Space::Empty
                                })
                            })
                            .collect::<Result<_>>()
                    })
                    .collect::<Result<_>>()?,
            ),
            state,
        })
    }
}

fn _get_input() -> &'static str {
    "#######################################################################################################################################################################################
#.....#.....#.....#...#...#.#...#...............................#.#.......#.#...#...........#...............#.#...#.....#.....#.....#...................#.......#.#.......#.....#...#.#
###.#.#.###.#.#.#.#.###.#.#.###.#.#.#.#.###.###.#.#.#.#.#.#.###.#.#.###.#.#.#####.###.#.###.#.###.###.#.#.###.#.###.#.#.#.###.###.###.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#
#.#......4#.#.....#...#...#.#...........#...#.#.#...#.#...#...#.#.........#.#.#.........#...........#.............#.....#...#...#.#...#...#...#....3#.....#.....#.............#.......#
#.#####.###.#.#####.#.#.#.#.#.#####.###.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#######.#.#.#.#.###.#####.###.#.#.###.###.#.#.#.#.#####.###.###.#.#.###.#.#####.#####.###.#####.###.#
#.#...#.....#.#.#...#.#.#.#.#...........#...#...#.....#...#...#.........#.............#.....#...#...#.........#.#...#.......#.....#.....#...#...#...........#.....#.....#...#...#.#...#
###.#.#.###.#.#.#.#.#.#.#.#.#####.###.###.#.#.###.#######.#.#.###.#.#.###.#######.###.#.#######.#.#####.#.###.#.#####.#.#.#.#.###.#.###.#.#.#.###.###.#.#.###.#.#.###.#.#.#.#.#.###.#.#
#...#.......#.#.#.........#...#.....#.#.....#...#...........#.#...#.....#.#.......................#.......#...#.............#...#...#...#.........#.....#.#...#...#.#.....#.....#.#...#
#.#.###.#.#.#.#.#.#####.###.#.#.###.#.#.#.#.###.###.#####.#.#####.#.###.#.#.#.#.###.#.###.#.#####.#.###.#.#.#.#.#.###.#.#.#.#.#.#####.#.#########.#####.#.#.#.#.#.#.#.###.#####.#.#.###
#...#...#.#.#...........#...#...#...#.........#.#...#.....#...#...#.#...#.....#.....#.....#...#...........#.#.#...#...#.....#.....#.#.......#...........#.#.......#...#.....#...#.#.#.#
#.#.###.#.#.#.#.###.#.###.#.#.#.###.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.#####.#.#.#.#.#####.#.###.###.#.#.#.#####.#####.#.#.#.#.###.#.#.#.#########.#.###.#.###.#.#.#.#.#.#.#.###.#
#...#...#...#.#...#...#.......#...............#.#...#.........#...#.#...#...#.............#.#...#.#.......#.....#...#...#.....#.#...#.........#6..#...#.....#.#.....#...#...#...#.....#
#.#.#.#######.#.#.#.#.#.#####.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#######.#.###.#.###.#####.#.#.#.#.#.#.#####.#######.#.###.#.#.#.#.#.#.#.###.#####.#.#.###.#####.#####.#.#####.#.#.#.###
#.....#.....#...#.#...#.#...........#...#...#.......#.....#.#.#...#.#.....#.....#.....#.......#.....#.#...#.#...#.......#.........#...#.......#...#.#.....#...#.....#.#.#.#.#.....#...#
###.#.###.#.#.###.#.#.#.#.###.###.#.###.#.#.#.#.###.#.###.#######.#.#.###.#.#.#.#.#.#.#.#######.###.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.###.#.#.###.#####.#.#.#.#.#.#.#.#.#.###.#####
#.#.#.#.....#...#.#...#...#...#.........#.....#.....#.#...#.......#...#.....#...#...#...#...#.....#...#.#...#.........#.....#.....#.......#.....#.#.....#...#...#...#.#.....#.........#
#.###.#.#.###.#.#.#.#.#.#.###.#####.###.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.#.#.#####.#####.#.#####.#.#.#######.#.#.#.#.#.#.###.#.#.#.#.#.#######.#.###.#.#####.###.###.#.#.#.#.#.###.#
#.....#.#5#...#...#...#.#.....#.........#.....#.#.......#...#.......#.#.......#.#.#...........#.......#...#.#.....#.#.........#...#.#.....#.......#..0#.........#...#.....#.#.....#.#.#
#.###.#.###.#.#.#.#.#.#.###.###.#####.#########.#.#.#.#.###.#.#.###.#.#.#.#.#.###.#.###.#####.#.#.#####.#.#.#.#.###.#######.#####.#########.#.#.#.#.#.#.###.#.#.#.#.#.###.#.#####.#.#.#
#.....#.........#...#...#.........#.....#.......#...#.#.......#.....#.#...#.#.#...#.#.#.....#...............#.#.....#.......#.#.......#.......#.#.....#.#.......#.........#.......#...#
#.###.#.#.#.###.#.###.#########.#.###.#.#.###.#.#.#####.#.#.#.#####.#.#.#.#.###.#.#.#.#.#.###.#.#.#.#.#.###.#.#.#####.#.#.###.#.###.#.#.#####.#.#.#####.#.#.###.#########.#.#.#######.#
#.....#.......................#.#.#...#...#.............#.#.....#...........#...#.#...#.........#.#...#.....#...........#.#.#.......#.#...#.......#.........#.................#.#.....#
#.#.#.#.#.#.#.###.#######.#.#.#.###.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#.#####.#.#.#.#.#.#######.###.#.#.###.#.#######.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#######.#.#####.#.#####.###.#.#
#...#...#...#.......#.#...#.#.#...#.#...........#.#.......#.....#.......#.......#.............#...#.#.#...#.......#.#.....#...#...#.....#.......#.....#...#.....#.........#.....#.#...#
#.#.###.#.#.#.###.#.#.#.#.#.#.###.#.###.###.###.#.#.###.#.#.#.#.#.#.###.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#.###.#####.#.#.#.###.#.#.#.#
#...............#.....#...#...#.....#.........#.....#...#...#.#.........#...........#.#.....#.#.....#...#...#...#.#.........#.....#...#.............#1#...#.#.........#.#...#.......#.#
#####.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###.###.###.#.###.#.#.###.###.#.#.#.###.#.#.#.###.###.#.#.#.#.#.#.#.###.#.#.#.#.#####.###.#.#.#.#.#.#######.#.#.#.###.#.#.#.###
#.#...........#.....#...#...#.#.........#...#...#.......#.....#.#.....#.........#.#...#...#...#.......#...#.......#.#.#...#.......#...#...............#.........#.......#.#...#.....#.#
#.#.#.#.#.###.#.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#######.#.#.###.#####.###.###.#.#.#.#######.#######.#.###.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#####.#.###.#.#####.#########.###.#.#.#.#
#...........#.....#.......#...#...#...#7..#.....#.......#.....#...#.....#.......#.#...#...#.....#.......#.#.#.....#...............#...#.#...#.#...#.......#.#.#.#...#...#.#.#.....#.#.#
###.###.###.#####.#.#########.#####.#.###.#######.###.#.###.#.###.###.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#.#####.#.#.#.#.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#####.#.#.#.#
#...#...#.#.......#...........#.......#.....#.#.......#.....#.#...#...#...#...#.......#...#.#.........#.............#...........#.#...#.#...#.#...#...#...#...#...#.#.....#.......#...#
#.###.#.#.#####.#.###.#.#.#####.#.#.#.#.###.#.#.###.#.#.#.###.#.#.#.#.#######.#.###.###.#.###.#####.#.#.#.###.#.#.#.#####.#.#.#.#####.#.#.###.#.#.#.#.#.###.#.###.###.#.#.#.#.#.#.#.###
#.#.....#.#.#.........#...........#...............#...#.#.#.#.#...#...#.........#...#...#.#.#.#...#...#.......#.#.....#.....#...#.#...#.#...........#.....#.#.....#...#.........#.....#
#.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.#####.###.###.###.###.###.###.#############.###.###.#.#.#.#.#.#.#.###.#.#.#####.#.#.#######.###.#.#.#.###.#.#.#.#.###.#######.#.#.#.#.###.#####.#
#...#.#.#.#...#.#...#.....#...........#.#...#.......#...........#...#.....#.#...........#.#.....#...#.#...#...#...............#...#...#.#...#...#...#...#.....#2......#...#.#.#.#.....#
#######################################################################################################################################################################################"
}
